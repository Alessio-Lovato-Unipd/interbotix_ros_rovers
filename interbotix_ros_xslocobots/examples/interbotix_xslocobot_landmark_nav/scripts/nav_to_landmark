#!/usr/bin/env python

import rospy
import rospkg
from interbotix_xs_modules.locobot import InterbotixLocobotXS
from interbotix_landmark_modules.landmark import LandmarkCollection

# Update this value with your model
MODEL = "wx250s"

class NavigationInterface(object):
    landmarks = LandmarkCollection(ros_on=True)

    def __init__(self):
        self.active_lm = None
        self.tags = []
        self.locobot = InterbotixLocobotXS(
            robot_model=f"locobot_{MODEL}",
            use_move_base_action=True
        )
        r = rospkg.RosPack()
        pkg_path = r.get_path("interbotix_xslocobot_landmark_nav")
        self.lm_config_filepath = rospy.get_param(
            "~landmark_config",
            f"{pkg_path}/landmarks/landmarks.yaml"
        )
        self._load_landmarks()

    def run(self):
        while not rospy.is_shutdown():
            print("Landmarks available to navigate to:")
            for lm in self.set_lms:
                print(f"\t- ({lm.id_}): {lm.label_}")
                print(f"\t\tmounted: {lm.is_mounted()}")
                print(f"\t\tmounted offset (m):\t{lm.get_mounted_offset()}")
                print(f"\t\trotation offset (rad):\t{lm.get_rotation_offset()}")
            print("//======================//")

            # Get ID of landmark and do some basic input validation
            while True:
                try:
                    print(f"Choose a landmark ID to navigate to. Options: {self.set_tags}")
                    lm_id = int(input(" > "))
                except ValueError:
                    print(f"'{lm_id}' is not an ID. Choose again.")
                    continue
                if lm_id in self.set_tags:
                    lm = self.landmarks.get_landmark(lm_id)
                    print(f"You have chosen to nav to '{lm.get_label()}'.")
                    break
                else:
                    print(f"'{lm_id}' is not in the list of landmarks. Choose again.")

            x, y, yaw = lm.get_mb_goal()

            if self.locobot.base.move_to_pose(x, y, yaw, wait=True):
                print(f"Successfully reached landmark '{lm.get_label()}'")
                print("Go to another landmark? Options [y/n]")
                if str(input("  >  ")).lower() not in ("y", "yes"):
                    break
            else:
                print(f"Failed to reach landmark '{lm.get_label()}'")
                print("Try again? Options [y/n]")
                if str(input("  >  ")).lower() not in ("y", "yes"):
                    break

    def _load_landmarks(self):
        if self.landmarks.load(self.lm_config_filepath):
            self.set_lms = self.landmarks.get_set_landmarks()
            self.set_tags = self.landmarks.get_set_tags()
            if len(self.set_lms) == 0:
                print("No landmarks are set. Did your robot see any landmarks?")
                exit()
            print(f"Loaded landmarks from '{self.lm_config_filepath}'.")
            self.landmarks.pub_markers(self.set_tags)
            self.landmarks.pub_tfs(self.set_tags)
        else:
            print("Failed to load landmarks. Exiting.")
            exit()

if __name__ == "__main__":
    nav = NavigationInterface()
    try:
        nav.run()
    except KeyboardInterrupt:
        pass
