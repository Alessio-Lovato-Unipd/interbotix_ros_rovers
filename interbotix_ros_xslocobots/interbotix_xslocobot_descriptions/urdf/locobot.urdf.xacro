<?xml version="1.0" ?>
<robot name="locobot" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:arg name="arm_model" default=""/>
  <xacro:arg name="robot_model" default=""/>
  <xacro:arg name="base_type" default=""/>
  <xacro:arg name="robot_name" default=""/>
  <xacro:arg name="show_lidar" default="true"/>
  <xacro:arg name="show_gripper_bar" default="true"/>
  <xacro:arg name="show_gripper_fingers" default="true"/>
  <xacro:arg name="external_urdf_loc" default=""/>
  <xacro:arg name="load_gazebo_configs" default="false"/>

  <xacro:property name="arm_type" value="$(arg arm_model)"/>
  <xacro:property name="urdf_loc" value="$(arg external_urdf_loc)"/>
  <xacro:property name="pi_offset" value="0.00001"/>

  <xacro:if value="$(arg load_gazebo_configs)">
    <xacro:include filename="$(find interbotix_xslocobot_gazebo)/config/locobot_configs.gazebo"/>
  </xacro:if>

  <xacro:if value="${urdf_loc != ''}">
    <xacro:include filename="${urdf_loc}"/>
  </xacro:if>

  <material name="interbotix_black">
    <texture filename="package://interbotix_xslocobot_descriptions/meshes/interbotix_black.png"/>
  </material>

  <link name="$(arg robot_name)/base_footprint"/>

  <!-- ********************************** Kobuki ********************************** -->

  <xacro:if value="${'$(arg base_type)' == 'kobuki'}">

    <!-- Much of the following Kobuki description is taken from https://github.com/yujinrobot/kobuki/blob/23748ed3dfb082831ca8eaaef1a0b08588dbcb65/kobuki_description/urdf/kobuki.urdf.xacro -->
    <!-- It has been modified to include the robot_name as a prefix to the links -->
    <!-- The kobuki_description package is distributed under the 3-Clause BSD License, but no license file was found in the package. -->
    <!-- The license from the kobuki_node package is given from https://github.com/yujinrobot/kobuki/blob/8f2fa7b9e5e98c503ba468602c3a5dd9be68fc26/kobuki_node/LICENSE below: -->
    <!--
      # Software License Agreement (BSD License)
      #
      # Copyright (c) 2012 Yujin Robot, Daniel Stonier, Jorge Santos,
      # Marcus Liebhardt, Younghun Ju, Jihoon Lee
      # All rights reserved.
      #
      # Redistribution and use in source and binary forms, with or without
      # modification, are permitted provided that the following conditions
      # are met:
      #
      #    * Redistributions of source code must retain the above copyright
      #        notice, this list of conditions and the following disclaimer.
      #    * Redistributions in binary form must reproduce the above
      #        copyright notice, this list of conditions and the following
      #        disclaimer in the documentation and/or other materials provided
      #        with the distribution.
      #    * Neither the name of Yujin Robot nor the names of its
      #        contributors may be used to endorse or promote products derived
      #        from this software without specific prior written permission.
      #
      # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
      # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
      # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
      # FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
      # COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
      # INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      # BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
      # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
      # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
      # ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
      # POSSIBILITY OF SUCH DAMAGE.
    -->

    <joint name="base_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0 0 0.0102"/>
      <parent link="$(arg robot_name)/base_footprint"/>
      <child link="$(arg robot_name)/base_link"/>
    </joint>

    <link name="$(arg robot_name)/base_link">
      <visual>
        <origin rpy="0 0 0" xyz="0.001 0 0.05199"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_main_body.dae"/>
        </geometry>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0.0 0 0.05949"/>
        <geometry>
          <cylinder length="0.10938" radius="0.178"/>
        </geometry>
      </collision>
      <inertial>
        <origin rpy="0 0 0" xyz="0.01 0 0"/>
        <mass value="2.4"/>
        <inertia ixx="0.019995" ixy="0.0" ixz="0.0" iyy="0.019995" iyz="0.0" izz="0.03675"/>
      </inertial>
    </link>

    <joint name="wheel_left_joint" type="continuous">
      <axis xyz="0 0 1"/>
      <origin rpy="-1.57079632679 0 0" xyz="0.00 0.115 0.0250"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/wheel_left_link"/>
    </joint>

    <transmission name="trans_wheel_left_joint">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="wheel_left_joint">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="wheel_left_joint_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>

    <link name="$(arg robot_name)/wheel_left_link">
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_wheel.dae"/>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="0.0206" radius="0.0352"/>
        </geometry>
          <origin rpy="0 0 0" xyz="0 0 0"/>
      </collision>
      <inertial>
        <origin xyz="0 0 0"/>
        <mass value="0.01"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>
    </link>

    <joint name="wheel_right_joint" type="continuous">
      <axis xyz="0 0 1"/>
      <origin rpy="-1.57079632679 0 0" xyz="0.00 -0.115 0.0250"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/wheel_right_link"/>
    </joint>

    <transmission name="trans_wheel_right_joint">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="wheel_right_joint">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="wheel_right_joint_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>

    <link name="$(arg robot_name)/wheel_right_link">
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_wheel.dae"/>
        </geometry>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <cylinder length="0.0206" radius="0.0350"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0"/>
        <mass value="0.01"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>
    </link>

    <joint name="caster_front_joint" type="fixed">
      <origin rpy="-1.57079632679 0 0" xyz="0.115 0.0 0.007"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/caster_front_link"/>
    </joint>

    <link name="$(arg robot_name)/caster_front_link">
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <cylinder length="0.0176" radius="0.017"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0"/>
        <mass value="0.01"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>
    </link>

    <joint name="caster_back_joint" type="fixed">
      <origin rpy="-1.57079632679 0 0" xyz="-0.135 0.0 0.009"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/caster_back_link"/>
    </joint>

    <link name="$(arg robot_name)/caster_back_link">
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <cylinder length="0.0176" radius="0.017"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0"/>
        <mass value="0.01"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>
    </link>

    <joint name="gyro_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0.056 0.062 0.0202"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/gyro_link"/>
    </joint>

    <link name="$(arg robot_name)/gyro_link">
      <inertial>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <mass value="0.001"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
      </inertial>
    </link>

    <joint name="cliff_sensor_left_joint" type="fixed">
      <origin rpy="0 1.57079632679 0" xyz="0.08734 0.13601 0.0214"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/cliff_sensor_left_link"/>
    </joint>

    <link name="$(arg robot_name)/cliff_sensor_left_link">
      <inertial>
        <mass value="0.0001"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
      </inertial>
    </link>

    <joint name="cliff_sensor_right_joint" type="fixed">
      <origin rpy="0 1.57079632679 0" xyz="0.085 -0.13601 0.0214"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/cliff_sensor_right_link"/>
    </joint>

    <link name="$(arg robot_name)/cliff_sensor_right_link">
      <inertial>
        <origin xyz="0 0 0"/>
        <mass value="0.0001"/>
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
      </inertial>
    </link>

    <joint name="cliff_sensor_front_joint" type="fixed">
      <origin rpy="0 1.57079632679 0" xyz="0.156 0.00 0.0214"/>
      <parent link="$(arg robot_name)/base_link"/>
      <child link="$(arg robot_name)/cliff_sensor_front_link"/>
    </joint>

    <link name="$(arg robot_name)/cliff_sensor_front_link">
      <inertial>
        <mass value="0.0001"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
      </inertial>
    </link>

  </xacro:if> <!-- kobuki -->

  <!-- ************************************* iRobot Create3 ************************************* -->

  <xacro:if value="${'$(arg base_type)' == 'create3'}">
    <!-- Much of the following iRobot Create3 description is taken from https://github.com/iRobotEducation/create3_sim/tree/6b8a4a6ce0d0902a7de117c29cbe55bfc52a4e54/irobot_create_common/irobot_create_description/urdf -->
    <!-- The original 3-Clause BSD License is retained below -->
    <!--
      Copyright 2021 iRobot Corporation.

      Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
      IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    -->
    <!-- It has been modified to include the robot_name as a prefix to the links -->
    <!-- It currently does not allow for simulation in either Gazebo (formerly Ignition) or Gazebo Class -->

    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/bumper.urdf.xacro" />
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/button.urdf.xacro" />
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/caster.urdf.xacro" />
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/common_properties.urdf.xacro"/>
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/sensors/cliff_sensor.urdf.xacro"/>
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/sensors/imu.urdf.xacro" />
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/sensors/ir_intensity.urdf.xacro" />
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/sensors/ir_opcode_receivers.urdf.xacro" />
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/sensors/optical_mouse.urdf.xacro"/>
    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/create3/wheel_with_wheeldrop.urdf.xacro" />

    <!-- Gazebo version -->
    <xacro:arg name="gazebo"                       default="classic" />

    <!-- Mechanical properties -->
    <xacro:property name="body_z_offset"           value="${-2.5*cm2m}" />
    <xacro:property name="body_collision_z_offset" value="${1*cm2m}" />
    <xacro:property name="body_mass"               value="2.300" />
    <xacro:property name="body_radius"             value="${16.4*cm2m}" />
    <xacro:property name="body_length"             value="${6*cm2m}" />

    <xacro:if value="${'$(arg gazebo)' == 'ignition'}">
      <xacro:property name="body_cog_x_offset"       value="${2.28*cm2m}" />
    </xacro:if>
    <xacro:if value="${'$(arg gazebo)' == 'classic'}">
      <xacro:property name="body_cog_x_offset"       value="${0*cm2m}" />
    </xacro:if>

    <xacro:property name="bumper_mass"             value="0.1" />
    <xacro:property name="bumper_offset_z"         value="${-2.5*cm2m}" />
    <xacro:property name="bumper_inertial_x"       value="${8*cm2m}" />
    <xacro:property name="bumper_inertial_z"       value="${2*cm2m}"/>

    <xacro:property name="wheel_height"            value="${-2.75*cm2m}" />
    <xacro:property name="distance_between_wheels" value="${23.3*cm2m}" />

    <xacro:property name="caster_position_x"       value="${12.5*cm2m}" />
    <xacro:if value="${'$(arg gazebo)' == 'ignition'}">
      <xacro:property name="caster_position_z"       value="${-5.03*cm2m}" />
    </xacro:if>
    <xacro:if value="${'$(arg gazebo)' == 'classic'}">
      <xacro:property name="caster_position_z"       value="${-5.2*cm2m}" />
    </xacro:if>

    <xacro:property name="wheel_drop_offset_z"     value="${3.5*mm2m}"/>
    <xacro:property name="wheel_drop_z"            value="${wheel_height + wheel_drop_offset_z}"/>

    <xacro:property name="base_link_z_offset"     value="${6.42*cm2m}"/>

    <joint name="base_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <parent link="$(arg robot_name)/base_footprint"/>
      <child link="$(arg robot_name)/base_link"/>
    </joint>

    <!-- Docking properties -->
    <xacro:property name="robot_model_name" value="create3"/>
    <xacro:property name="receiver_link_name" value="ir_omni"/>
    <xacro:property name="dock_model_name" value="standard_dock"/>
    <xacro:property name="emitter_link_name" value="halo_link"/>
    <xacro:arg name="visualize_rays" default="false"/>
    <!-- Create 3 base definition-->
    <link name="$(arg robot_name)/base_link">
      <visual>
        <origin xyz="0 0 ${body_z_offset + base_link_z_offset}" rpy="0 0 ${pi/2}"/>
        <geometry>
          <mesh filename="package://irobot_create_description/meshes/body_visual.dae" />
        </geometry>
      </visual>
      <collision name="create3_base_collision">
        <origin xyz="0 0 ${body_z_offset + body_collision_z_offset  + base_link_z_offset}" rpy="0 0 ${pi/2}"/>
        <geometry>
          <cylinder length="${body_length}" radius="${body_radius}"/>
        </geometry>
      </collision>
      <xacro:inertial_cylinder_with_pose mass="${body_mass}" radius="${body_radius}" length="${body_length}">
        <origin xyz="${body_cog_x_offset} 0 ${body_collision_z_offset + base_link_z_offset}"/>
      </xacro:inertial_cylinder_with_pose>
    </link>

    <xacro:if value="${'$(arg gazebo)' == 'ignition'}">
      <gazebo reference="base_link">
        <xacro:material_darkgray/>
      </gazebo>
    </xacro:if>

    <!-- Bumper -->
    <xacro:bumper
        gazebo="$(arg gazebo)"
        visual_mesh="package://irobot_create_description/meshes/bumper_visual.dae"
        collision_mesh="package://irobot_create_description/meshes/bumper_collision.dae">
      <origin xyz="0 0 ${bumper_offset_z  + base_link_z_offset}"/>
      <inertial>
        <origin xyz="${bumper_inertial_x} 0 ${bumper_inertial_z}"/>
        <mass value="${bumper_mass}"/>
        <inertia ixx="0.0013483753405" ixy="0.0000000454352" ixz="0.0000014434849"
                iyy="0.0002521736852" iyz="-0.0000000006721" izz="0.0015442525386"/>
      </inertial>
    </xacro:bumper>

    <!-- Wheels with mechanical wheel drop -->
    <xacro:wheel_with_wheeldrop name="left" gazebo="$(arg gazebo)">
      <origin xyz="0 ${distance_between_wheels/2} ${wheel_drop_z  + base_link_z_offset}" rpy="${-pi/2} 0 0"/>
    </xacro:wheel_with_wheeldrop>

    <xacro:wheel_with_wheeldrop name="right" gazebo="$(arg gazebo)">
      <origin xyz="0 ${-distance_between_wheels/2} ${wheel_drop_z  + base_link_z_offset}" rpy="${-pi/2} 0 0"/>
    </xacro:wheel_with_wheeldrop>

    <!-- Caster wheel -->
    <xacro:caster name="front_caster" parent_link="base_link">
      <origin xyz="${caster_position_x} 0 ${caster_position_z  + base_link_z_offset}" rpy="${-pi/2} 0 0"/>
    </xacro:caster>

    <!-- IMU -->
    <xacro:imu_sensor gazebo="$(arg gazebo)">
      <origin xyz="0.050613 0.043673 ${0.0202 + base_link_z_offset}"/>
    </xacro:imu_sensor>

    <!-- <xacro:if value="${'$(arg gazebo)' == 'classic'}">
      <gazebo>
        <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
          <parameters> $(find irobot_create_control)/config/control.yaml </parameters>
        </plugin>
      </gazebo>
    </xacro:if> -->

    <!-- <xacro:if value="${'$(arg gazebo)' == 'ignition'}">
      <gazebo>
        <plugin filename="ign_ros2_control-system" name="ign_ros2_control::IgnitionROS2ControlPlugin">
          <parameters> $(find irobot_create_control)/config/control.yaml </parameters>
        </plugin>
      </gazebo>
    </xacro:if> -->

    <!-- Mouse -->
    <xacro:optical_mouse gazebo="$(arg gazebo)">
      <origin xyz="0.1015 0.087 ${-0.055 + base_link_z_offset}" rpy="0 0 ${-pi/4}"/>
    </xacro:optical_mouse>

    <!-- Cliffs sensors -->
    <xacro:property name="cliff_z"  value="${-4.5*cm2m}" />

    <xacro:property name="cliff_center_x" value="${16*cm2m}"/>
    <xacro:property name="cliff_center_y" value="${4.5*cm2m}"/>
    <xacro:property name="cliff_center_pitch" value="${80*deg2rad}"/>
    <xacro:property name="cliff_center_yaw" value="${65.3*deg2rad}"/>

    <xacro:property name="cliff_back_x" value="${6*cm2m}"/>
    <xacro:property name="cliff_back_y" value="${14.5*cm2m}"/>
    <xacro:property name="cliff_back_pitch" value="${80*deg2rad}"/>
    <xacro:property name="cliff_back_yaw" value="${167.4*deg2rad}"/>

    <xacro:cliff_sensor name="side_left" gazebo="$(arg gazebo)" visualize="$(arg visualize_rays)">
      <origin xyz="${cliff_back_x} ${cliff_back_y} ${cliff_z + base_link_z_offset}"
              rpy="0 ${cliff_back_pitch} ${cliff_back_yaw}"/>
    </xacro:cliff_sensor>

    <xacro:cliff_sensor name="side_right" gazebo="$(arg gazebo)" visualize="$(arg visualize_rays)">
      <origin xyz="${cliff_back_x} ${- cliff_back_y} ${cliff_z + base_link_z_offset}"
              rpy="0 ${cliff_back_pitch} ${- cliff_back_yaw}"/>
    </xacro:cliff_sensor>

    <xacro:cliff_sensor name="front_left" gazebo="$(arg gazebo)" visualize="$(arg visualize_rays)">
      <origin xyz="${cliff_center_x} ${cliff_center_y} ${cliff_z + base_link_z_offset}"
              rpy="0 ${cliff_center_pitch} ${cliff_center_yaw}"/>
    </xacro:cliff_sensor>

    <xacro:cliff_sensor name="front_right" gazebo="$(arg gazebo)" visualize="$(arg visualize_rays)">
      <origin xyz="${cliff_center_x} ${- cliff_center_y} ${cliff_z + base_link_z_offset}"
              rpy="0 ${cliff_center_pitch} ${- cliff_center_yaw}"/>
    </xacro:cliff_sensor>

    <!-- IR intensity sensors -->
    <xacro:property name="ir_intensity_z_pos" value="${-0.7*cm2m}"/>
    <!--
    The robot uses 7 IR sensors in the front to execute a wall-following action
    or reduce the speed when it detects something in front for safety reasons.

    The arrangement of the sensors is defined in the following schema of the top
    view of the robot:
                            Front view
                                |
                                V

                          front_center_left
                  front_left            front_center_right
              left                                    front_right
    side_left                                                   right
    -->
    <xacro:ir_intensity name="front_center_left" gazebo="$(arg gazebo)">
      <origin xyz="0.1540 0 ${ir_intensity_z_pos + base_link_z_offset}"/>
    </xacro:ir_intensity>
    <xacro:ir_intensity name="front_center_right" gazebo="$(arg gazebo)">
      <origin xyz="0.1396 -0.0651 ${ir_intensity_z_pos + base_link_z_offset}" rpy="0 0 -0.436"/>
    </xacro:ir_intensity>
    <xacro:ir_intensity name="front_left" gazebo="$(arg gazebo)">
      <origin xyz="0.1396 0.0651 ${ir_intensity_z_pos + base_link_z_offset}" rpy="0 0 0.436"/>
    </xacro:ir_intensity>
    <xacro:ir_intensity name="front_right" gazebo="$(arg gazebo)">
      <origin xyz="0.0990 -0.1180 ${ir_intensity_z_pos + base_link_z_offset}" rpy="0 0 -0.873"/>
    </xacro:ir_intensity>
    <xacro:ir_intensity name="left" gazebo="$(arg gazebo)">
      <origin xyz="0.0990 0.1180 ${ir_intensity_z_pos + base_link_z_offset}" rpy="0 0 0.873"/>
    </xacro:ir_intensity>
    <xacro:ir_intensity name="right" gazebo="$(arg gazebo)">
      <origin xyz="0.0399 -0.1488 ${ir_intensity_z_pos + base_link_z_offset}" rpy="0 0 -1.309"/>
    </xacro:ir_intensity>
    <xacro:ir_intensity name="side_left" gazebo="$(arg gazebo)">
      <origin xyz="0.0399 0.1488 ${ir_intensity_z_pos + base_link_z_offset}" rpy="0 0 1.309"/>
    </xacro:ir_intensity>

    <!-- Buttons -->
    <xacro:button
        name="button_1">
        <origin xyz="0.06 0.37 ${0.08 + base_link_z_offset}" rpy="0 ${-pi/2} 0"/>
    </xacro:button>
    <xacro:button
        name="button_2">
        <origin xyz="0.06 -0.37 ${0.08 + base_link_z_offset}" rpy="0 ${-pi/2} 0"/>
    </xacro:button>
    <xacro:button
        name="button_power">
        <origin xyz="0.06 0 ${0.08 + base_link_z_offset}" rpy="0 ${-pi/2} 0"/>
    </xacro:button>

    <!-- Omni IR receiver (sensor 0) parameters and Front-facing IR receiver (sensor 1) parameters -->
    <xacro:property name="ir_omni_fov_rad" value="${220.0*deg2rad}"/>
    <xacro:property name="ir_front_facing_fov_rad" value="${pi/2}"/>
    <xacro:ir_opcode_receivers gazebo="$(arg gazebo)" robot_model_name="${robot_model_name}" dock_model_name="${dock_model_name}"
      emitter_link_name="${emitter_link_name}" sensor_0_range="0.01" sensor_0_fov="${ir_omni_fov_rad}"
      sensor_1_range="0.5" sensor_1_fov="${ir_front_facing_fov_rad}" >
      <origin xyz="0.153 0 ${0.035 + base_link_z_offset}"/>
    </xacro:ir_opcode_receivers>

    <!-- Plugins -->
    <xacro:if value="${'$(arg gazebo)' == 'classic'}">
      <!-- Ground truth pose -->
      <gazebo>
        <plugin name="gazebo_ros_p3d_robot" filename="libgazebo_ros_p3d.so">
          <ros>
            <namespace>/</namespace>
            <remapping>odom:=sim_ground_truth_pose</remapping>
          </ros>
          <body_name>base_link</body_name>
          <frame_name>world</frame_name>
          <update_rate>62</update_rate>
          <xyz_offset>0 0 0</xyz_offset>
          <rpy_offset>0.0 0.0 0.0</rpy_offset>
          <gaussian_noise>0.0</gaussian_noise>
        </plugin>
      </gazebo>

      <!-- Dock status -->
      <gazebo>
        <plugin name="dock_status_publisher" filename="libgazebo_ros_create_docking_status.so">
          <ros>
            <namespace>/</namespace>
            <remapping>~/out:=dock</remapping>
          </ros>
          <update_rate>1.0</update_rate>
          <robot_model_name>${robot_model_name}</robot_model_name>
          <receiver_link_name>${receiver_link_name}</receiver_link_name>
          <dock_model_name>${dock_model_name}</dock_model_name>
          <emitter_link_name>${emitter_link_name}</emitter_link_name>
        </plugin>
      </gazebo>
    </xacro:if>

    <xacro:if value="${'$(arg gazebo)' == 'ignition'}">
      <gazebo>
        <plugin filename="libignition-gazebo-pose-publisher-system.so" name="ignition::gazebo::systems::PosePublisher">
          <publish_link_pose>true</publish_link_pose>
          <publish_nested_model_pose>true</publish_nested_model_pose>
          <use_pose_vector_msg>true</use_pose_vector_msg>
          <update_frequency>62</update_frequency>
        </plugin>
      </gazebo>

      <gazebo>
        <plugin filename="libignition-gazebo-contact-system.so" name="ignition::gazebo::systems::Contact"></plugin>
      </gazebo>

      <gazebo>
        <plugin filename="libignition-gazebo-sensors-system.so" name="ignition::gazebo::systems::Sensors">
          <render_engine>ogre</render_engine>
        </plugin>
      </gazebo>
    </xacro:if>
  </xacro:if> <!-- create3 -->

  <!-- ********************************** Bottom Plate and Arm ********************************** -->

  <joint name="plate" type="fixed">
    <origin rpy="0 0 0" xyz="0.0 0 0.08825"/>
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/plate_link"/>
  </joint>

  <link name="$(arg robot_name)/plate_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_base_plate.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="interbotix_black"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_base_plate.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0.050816 0 0.00475"/>
      <mass value="0.571995"/>
      <inertia ixx="0.003115" ixy="0" ixz="0" iyy="0.001813" iyz="0" izz="0.004919"/>
    </inertial>
  </link>

  <xacro:if value="${arm_type != 'mobile_base'}">

    <xacro:include filename="$(find interbotix_xslocobot_descriptions)/urdf/$(arg arm_model).urdf.xacro"/>

    <xacro:if value="${arm_type == 'mobile_wx200'}">

      <joint name="arm_cradle" type="fixed">
         <axis xyz="0 0 0"/>
         <origin rpy="0 0 0" xyz="0.0215 0 0.1195"/>
         <parent link="$(arg robot_name)/camera_tower_link"/>
         <child link="$(arg robot_name)/arm_cradle_link"/>
      </joint>

     <link name="$(arg robot_name)/arm_cradle_link">
       <visual>
         <origin rpy="0 0 0" xyz="0 0 0"/>
         <geometry>
           <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_arm_cradle.stl" scale="0.001 0.001 0.001"/>
         </geometry>
         <material name="interbotix_black"/>
       </visual>
       <collision>
         <origin rpy="0 0 0" xyz="0 0 0"/>
         <geometry>
           <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_arm_cradle.stl" scale="0.001 0.001 0.001"/>
         </geometry>
       </collision>
       <inertial>
         <origin rpy="0 0 0" xyz="0.0014389900 0 0.0098387400"/>
         <mass value="0.017626"/>
         <inertia ixx="0.0000046575" ixy="0" ixz="0.0000000748" iyy="0.0000018629" iyz="0" izz="0.0000046198"/>
       </inertial>
     </link>

    </xacro:if>

  </xacro:if>

  <!-- ********************************** Battery **********************************  -->

  <joint name="battery" type="fixed">
    <origin rpy="0 0 0" xyz="-0.007 0 0.0125"/>
    <parent link="$(arg robot_name)/plate_link"/>
    <child link="$(arg robot_name)/battery_link"/>
  </joint>

  <link name="$(arg robot_name)/battery_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_battery.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="">
        <color rgba="0.5 0.5 0.5 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_battery.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.016"/>
      <mass value="1.194"/>
      <inertia ixx="0.004312" ixy="0" ixz="0" iyy="0.001908" iyz="0" izz="0.006017"/>
    </inertial>
  </link>

  <!-- ********************************** Camera Tower **********************************  -->
  <joint name="camera_tower" type="fixed">
    <origin rpy="0 0 0" xyz="-0.023997 -0.000044 0.08823"/>
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/camera_tower_link"/>
  </joint>

  <xacro:if value="${arm_type == 'mobile_wx250s'}">
    <link name="$(arg robot_name)/camera_tower_link">
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_camera_tower_large.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="interbotix_black"/>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_camera_tower_large_simple.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <inertial>
        <origin rpy="0 0 0" xyz="-0.0372211000 -0.0026114300 0.1744600000"/>
        <mass value="2.366224"/>
        <inertia ixx="0.0628500000" ixy="0.0002152000" ixz="0.0065630000" iyy="0.0546000000" iyz="-0.0004738000" izz="0.0179300000"/>
      </inertial>
    </link>
  </xacro:if>

  <xacro:unless value="${arm_type == 'mobile_wx250s'}">
    <link name="$(arg robot_name)/camera_tower_link">
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_camera_tower_small.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="interbotix_black"/>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_camera_tower_small_simple.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <inertial>
        <origin rpy="0 0 0" xyz="-0.0357703000 -0.0027068600 0.1560470000"/>
        <mass value="2.282808"/>
        <inertia ixx="0.0461600000" ixy="0.0002062000" ixz="0.0052560000" iyy="0.0384200000" iyz="-0.0003600000" izz="0.0169600000"/>
      </inertial>
    </link>
  </xacro:unless>

  <!-- ********************************** Pan & Tilt **********************************  -->

  <joint name="pan" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="2" lower="${-pi/2}" upper="${pi/2}" velocity="${pi}"/>
    <xacro:if value="${arm_type == 'mobile_wx250s'}">
      <origin rpy="0 0 0" xyz="0.047228 0 0.44425"/>
    </xacro:if>
    <xacro:unless value="${arm_type == 'mobile_wx250s'}">
      <origin rpy="0 0 0" xyz="0.047228 0 0.38425"/>
    </xacro:unless>
    <parent link="$(arg robot_name)/camera_tower_link"/>
    <child link="$(arg robot_name)/pan_link"/>
  </joint>

  <transmission name="trans_pan">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="pan">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="pan_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <link name="$(arg robot_name)/pan_link">
    <visual>
      <origin rpy="0 0 ${pi/2}" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_pan.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="interbotix_black"/>
    </visual>
    <collision>
      <origin rpy="0 0 ${pi/2}" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_pan.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 ${pi/2}" xyz="0.012 0.000496 0.018504"/>
      <mass value="0.098997"/>
      <inertia ixx="0.0000276300" ixy="0.0000000418" ixz="0.0000005145" iyy="0.0000204300" iyz="-0.0000000421" izz="0.0000276300"/>
    </inertial>
  </link>

  <joint name="tilt" type="revolute">
    <axis xyz="0 1 0"/>
    <limit effort="2" lower="${-pi/2}" upper="${radians(75)}" velocity="${pi}"/>
    <origin rpy="0 0 0" xyz="0.025034 0 0.019"/>
    <parent link="$(arg robot_name)/pan_link"/>
    <child link="$(arg robot_name)/tilt_link"/>
  </joint>

  <transmission name="trans_tilt">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="tilt">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="tilt_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <link name="$(arg robot_name)/tilt_link">
    <visual>
      <origin rpy="0 0 ${pi/2}" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_tilt.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="interbotix_black"/>
    </visual>
    <collision>
      <origin rpy="0 0 ${pi/2}" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_tilt.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 ${pi/2}" xyz="0.0237737000 -0.0000016331 0.0000077432"/>
      <mass value="0.019845"/>
      <inertia ixx="0.0000021677" ixy="0.0000000000" ixz="0.0000000001" iyy="0.0000063634" iyz="0.0000000003" izz="0.0000066157"/>
    </inertial>
  </link>

  <joint name="camera" type="fixed">
    <origin rpy="0 0 0" xyz="0.05318 0.0175 0.000009"/>
    <parent link="$(arg robot_name)/tilt_link"/>
    <child link="$(arg robot_name)/camera_link"/>
  </joint>

  <link name="$(arg robot_name)/camera_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_camera.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="">
        <color rgba="0.55 0.55 0.55 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_camera.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="-0.008972 -0.015818 0.000003"/>
      <mass value="0.072"/>
      <inertia ixx="0.0000465400" ixy="0.0000003028" ixz="0.0000000245" iyy="0.0000069128" iyz="0.0000000248" izz="0.0000468600"/>
    </inertial>
  </link>

  <!-- ********************************** Lidar **********************************  -->

  <xacro:if value="$(arg show_lidar)">

    <joint name="lidar_tower" type="fixed">
      <xacro:if value="${arm_type == 'mobile_wx250s'}">
        <origin rpy="0 0 0" xyz="-0.074 0 0.44425"/>
      </xacro:if>
      <xacro:unless value="${arm_type == 'mobile_wx250s'}">
        <origin rpy="0 0 0" xyz="-0.074 0 0.38425"/>
      </xacro:unless>
      <parent link="$(arg robot_name)/camera_tower_link"/>
      <child link="$(arg robot_name)/lidar_tower_link"/>
    </joint>

    <link name="$(arg robot_name)/lidar_tower_link">
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_lidar_tower.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="interbotix_black"/>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_lidar_tower_simple.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <inertial>
        <origin rpy="0 0 0" xyz="-0.0074822400 -0.0000196881 0.0507957000"/>
        <mass value="0.155485"/>
        <inertia ixx="0.0007642000" ixy="-0.0000001357" ixz="0.0000134700" iyy="0.0001285000" iyz="0.0000000354" izz="0.0007840000"/>
      </inertial>
    </link>

    <joint name="lidar" type="fixed">
      <origin rpy="0 0 ${pi}" xyz="0 0 0.09425"/>
      <parent link="$(arg robot_name)/lidar_tower_link"/>
      <child link="$(arg robot_name)/laser_frame_link"/>
    </joint>

    <link name="$(arg robot_name)/laser_frame_link">
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://interbotix_xslocobot_descriptions/meshes/locobot_meshes/locobot_lidar.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="interbotix_black"/>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 -0.0091"/>
        <geometry>
          <cylinder length="0.0408" radius="0.03785"/>
        </geometry>
      </collision>
      <inertial>
        <origin rpy="0 0 0" xyz="0.0007379970 0 -0.0103809000"/>
        <mass value="0.196"/>
        <inertia ixx="0.0000907500" ixy="0.0000000001" ixz="-0.0000014234" iyy="0.0000877600" iyz="0" izz="0.0001268000"/>
      </inertial>
    </link>

  </xacro:if>

</robot>
